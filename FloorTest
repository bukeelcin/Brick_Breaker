//FLOOR TEST CLASS
import static org.junit.Assert.*;

import java.awt.Color;

import org.junit.Test;

public class FloorTest {

	// CAN X LOCATION AND Y LOCATION HAVE POSITIVE VALUES?
	@Test
	public void testConstructor1() {
		int x = 20;
		int y = 20;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN X LOCATION BE 0?
	@Test
	public void testConstructor2() {
		int x = 0;
		int y = 20;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN Y LOCATION BE 0?
	@Test
	public void testConstructor3() {
		int x = 20;
		int y = 0;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN X LOCATION BE NEGATIVE VALUE?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor4() {
		int x = -2;
		int y = 20;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN Y LOCATION BE NEGATIVE VALUE?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor5() {
		int x = 20;
		int y = -2;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN X LOCATION BE BIGGER THAN 600?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor6() {
		int x = 620;
		int y = 20;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN Y LOCATION BE BIGGER THAN 600?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor7() {
		int x = 20;
		int y = 640;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN WIDTH AND HEIGHT HAVE POSITIVE VALUES?
	@Test
	public void testConstructor8() {
		int x = 20;
		int y = 20;
		int width = 20;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN WIDTH BE 0?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor9() {
		int x = 20;
		int y = 20;
		int width = 0;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN HEIGHT BE 0?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor10() {
		int x = 20;
		int y = 20;
		int width = 20;
		int height = 0;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN WIDTH BE NEGATIVE VALUE?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor11() {
		int x = 20;
		int y = 20;
		int width = -2;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN HEIGHT BE NEGATIVE VALUE?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor12() {
		int x = 20;
		int y = 20;
		int width = 20;
		int height = -2;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN WIDTH BE BIGGER THAN 600?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor13() {
		int x = 20;
		int y = 20;
		int width = 610;
		int height = 20;

		Floor floor = new Floor(x, y, width, height);

	}

	// CAN HEIGT BE BIGGER THAN 40?
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor14() {
		int x = 20;
		int y = 20;
		int width = 20;
		int height = 45;

		Floor floor = new Floor(x, y, width, height);

	}

	// DOES SETMethod WORK PROPERLY?
	@Test
	public void testsetMethod1() {

		Floor floor = new Floor(50, 50, 20, 20);
		floor.setX(5);
		floor.setY(5);
		assertEquals(5, floor.getX());
		assertEquals(5, floor.getY());

	}

	// DOES SETMethod WORK GIVES 0?
	@Test
	public void testsetMethod2() {

		Floor floor = new Floor(50, 50, 20, 20);
		floor.setX(0);
		assertEquals(0, floor.getX());
	}

	// DOES SETMethod WORK GIVES 0?
	@Test
	public void testsetMethod3() {

		Floor floor = new Floor(50, 50, 20, 20);
		floor.setY(0);
		assertEquals(0, floor.getY());
	}

	// DOES getWidthMethod WORK PROPERLY?
	@Test
	public void testgetWidthMethod1() {

		Floor floor = new Floor(50, 50, 20, 20);
		assertEquals(20, floor.getWidth());

	}

	// DOES getHeightMethod WORK PROPERLY?
	@Test
	public void testgetHeightMethod1() {

		Floor floor = new Floor(50, 50, 20, 20);
		assertEquals(20, floor.getHeight());
	}

}
