//GAME OVER PART2 IS ADDED.
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Layout extends JPanel {
	int level = 1;
	int score = 0;
	int lives = 3;
	ArrayList<Brick> bricks;
	Floor floor;
	Ball ball;
	int Vx, Vy;

	int levelCounter;

	public Layout() {
		bricks = new ArrayList<Brick>();
		floor = new Floor(200, 550, 100, 20);
		ball = new Ball(240, 440, 10, 10);
		MyMouseListener listener = new MyMouseListener(floor);
		addMouseListener(listener);
		addMouseMotionListener(listener);
	}

	public void addBrick(Brick brick) {
		bricks.add(brick);
	}

	public void paint(Graphics g) {
		super.paint(g);
		
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, 600, 620);

		for (int i = 0; i < bricks.size(); i++) {
			Brick brick = bricks.get(i);
			
				brick.color = Color.RED;
				brick.drawOn(g);
			
		}
		floor.drawOn(g);
		ball.drawOn(g);

		g.setColor(Color.WHITE);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.drawString("LEVEL:" + level, 130, 30);

		g.setColor(Color.WHITE);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.drawString("POINTS:" + score, 240, 30);

		g.setColor(Color.WHITE);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.drawString("LIVES:" + lives, 370, 30);

		 if (lives == 0) {
		 g.setColor(Color.WHITE);
		 g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		 g.drawString("YOU LOSE!", 240, 300);
		 }
		if (bricks.size() == 0 && level == 3) {
			g.setColor(Color.WHITE);
			g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
			g.drawString("YOU WIN!", 240, 300);

		}

	}

	public void start() throws InterruptedException {
		Vx = 5;
		Vy = -5;
		boolean move = true;
		while (move) {
			ball.move(Vx, Vy);
			if (ball.getX() == 580 || ball.getX() == 0) {
				Vx = -Vx;
			}
			if ((ball.getY() == 0) || (bounce() && ball.getY() == 540)) {

				Vy = -Vy;
			}
			if (ball.getY() > 600) {
				lives -= 1;
				ball.setX(250);
				ball.setY(450);
				Vx = 5;
				Vy = -5;
			}
			 if (lives == 0) {
			 move = false;
			 }
			Thread.currentThread().sleep(15);
			for (int i = 0; i < bricks.size(); i++) {
				Brick brick = bricks.get(i);
				if (checkcollision(brick)) {
						bricks.remove(i);
						score += 10;
					
				}
			}

			if (bricks.size() == 0 && level == 1) {

				ball.setX(250);
				ball.setY(450);

				level = 2;
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 4; j++) {
						Brick brick = new Brick(210 + 20 * i, 100 + 20 * j, 20,
								20, null);
						addBrick(brick);
					}

				}
				while (levelCounter <= 500000) {
					levelCounter++;
					Vx = 0;
					Vy = 0;
					ball.move(0, 0);
				}

				Vx = 5;
				Vy = -5;
				levelCounter = 0;
			} else if (bricks.size() == 0 && level == 2) {

				ball.setX(250);
				ball.setY(450);

				level = 3;
				int x = 0;
				int y = 0;
				for (int i = 0; i < 6; i++) {
					for (int j = 0; j < i; j++) {
						Brick brick = new Brick(125 + 20 * j - x, 50 + y, 20,
								20, null);
						addBrick(brick);
					}
					x = 0;
					y += 20;
				}

				x = 0;
				y = 0;

				for (int i = 0; i < 6; i++) {
					for (int j = 0; j < i; j++) {
						Brick brick = new Brick(450 + 20 * j + x, 50 + y, 20,
								20, null);
						addBrick(brick);
					}
					x -= 20;
					y += 20;
				}
				while (levelCounter <= 500000) {
					levelCounter++;
					Vx = 0;
					Vy = 0;
					ball.move(0, 0);
				}

				Vx = 5;
				Vy = -5;
			} else if (bricks.size() == 0 && level == 3) {

				ball.setX(250);
				ball.setY(350);
				Vx = 0;
				Vy = 0;

				ball.move(0, 0);
				move = false;
			}

			repaint();

		}
	}

	public boolean bounce() {
		return floor.getX() <= ball.getX()
				&& ball.getX() <= floor.getX() + floor.getWidth();

	}

	public boolean checkcollision(Brick brick) {

		if ((brick.getX() < ball.getX() + 5 && ball.getX() + 5 < brick.getX()
				+ brick.getWidth())
				&& (ball.getY() == brick.getY() + brick.getHeight())) {
			Vy = -Vy;
			return true;

		} else if ((brick.getX() < ball.getX() + 5 && ball.getX() + 5 < brick
				.getX() + brick.getWidth())
				&& ball.getY() + 10 == brick.getY()) {
			Vy = -Vy;
			return true;

		}
		if (brick.getY() < ball.getY() + 5
				&& ball.getY() + 5 < brick.getY() + brick.getHeight()
				&& ((ball.getX() + 10 == brick.getX()))) {
			Vx = -Vx;
			return true;
		} else if (brick.getY() < ball.getY() + 5
				&& ball.getY() + 5 < brick.getY() + brick.getHeight()
				&& ball.getX() == brick.getX() + brick.getWidth()) {
			Vx = -Vx;
			return true;
		}
		if (((brick.getX() == ball.getX() + 5) || (ball.getX() + 5 == brick
				.getX() + brick.getWidth()))
				&& ((brick.getY() == ball.getY() + 5 || ball.getY() + 5 == brick
						.getY() + brick.getHeight()))) {
			Vx = -Vx;
			Vy = -Vy;
			return true;
		}
		return false;
	}
}

class MyMouseListener extends MouseAdapter {
	private Floor floor;
	private int dx;

	public MyMouseListener(Floor floor) {
		this.floor = floor;
	}

	public void mousePressed(MouseEvent e) {
		dx = e.getX() - floor.getX();
	}

	public void mouseDragged(MouseEvent e) {
		if (0 < e.getX() - dx && e.getX() - dx < 484)
			floor.setX(e.getX() - dx);
	}
}

class KeyInputHandler extends KeyAdapter {

	/** True if the left cursor key is currently pressed */
	static boolean upPressed = false;

	/** True if the right cursor key is currently pressed */
	static boolean downPressed = false;

	static boolean rightPressed = false;

	/** True if the right cursor key is currently pressed */
	static boolean leftPressed = false;

	/** True if we are firing */
	static boolean firePressed = false;

	static boolean clearAllPressed = false;

	public void keyPressed(KeyEvent e) {

		if (e.getKeyCode() == KeyEvent.VK_UP) {
			upPressed = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN) {
			downPressed = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			leftPressed = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			rightPressed = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			firePressed = true;
		}
	}

	public void keyReleased(KeyEvent e) {

		if (e.getKeyCode() == KeyEvent.VK_UP) {
			upPressed = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN) {
			downPressed = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			rightPressed = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			leftPressed = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			firePressed = false;
		}

	}

}
