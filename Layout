package Brick_Breaker;

//OUR CHANGES FOR REMOVE BRICKS, INCREASE SCORE AND ADD LEVELS WILL BE DEPENDENT ON THIS CLASS. 
//ECE IS RESPONSIBLE FOR REMOVING BRICKS
//SEVINC AND FARUK ARE RESPONSIBLE FOR INCREASE SCORE.
//ELCIN AND DENIZ ARE RESPONSIBLE ADDDING NEW LEVELS. 

import java.awt.Color;
import java.awt.Graphics;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.security.GuardedObject;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Layout extends JPanel {
        int level = 1;
	ArrayList<Brick> bricks;
	Floor floor;
	Ball ball;
	int Vx, Vy;

	public Layout() {
		bricks = new ArrayList<Brick>();
		floor = new Floor(200, 450, 100, 20);
		ball = new Ball(240, 440, 10, 10);
		MyMouseListener listener = new MyMouseListener(floor);
		addMouseListener(listener);
		addMouseMotionListener(listener);
	}

	public void addBrick(int x, int y, int width, int height, Color color) {
		bricks.add(new Brick(x, y, width, height, color));
	}

	public void paint(Graphics g) {
		super.paint(g);
		g.setColor(Color.BLACK);
                g.fillRect(0, 0, 600, 620);
		g.setColor(Color.BLUE);
		for (int i = 0; i < bricks.size(); i++) {
			Brick brick = bricks.get(i);
			brick.drawOn(g);
		}
		floor.drawOn(g);
		ball.drawOn(g);
		
		g.setColor(Color.WHITE);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.drawString("LEVEL:" + level, 130, 30);

	}
	public void Move() throws InterruptedException {
		Vx = 5;
		Vy = -5;
		while (true) {
			ball.setX(Vx);
			ball.setY(Vy);
			if (ball.getX() == 580 || ball.getX() == 0) {
				Vx = -Vx;
			}
			if ((ball.getY() == 0) || (bounce() && ball.getY() == 640)) {
				Vy = -Vy;
			}
			
			if (ball.getY() > 600) {
				lives -= 1;
				ball.setX(250);
				ball.setY(450);
				Vx = 5;
				Vy = -5;
			}
	                    if (bricks.size() == 0 && level == 1) {

				ball.setX(250);
				ball.setY(450);

				level = 2;
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 4; j++) {
						addBrick(210 + 20 * i, 100 + 20 * j, 20, 20, null);
					}

			}
			
			Thread.currentThread().sleep(15);
			for (int i = 0; i < bricks.size(); i++) {
				Brick brick = bricks.get(i);
				if (checkcollision(brick)) {
					bricks.remove(i);
					Layout.score += 10;
					
				}
			}
			
			if (bricks.size() == 0 && level == 1) {

				ball.setX(250);
				ball.setY(450);

				level = 2;
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 4; j++) {
						addBrick(210 + 20 * i, 100 + 20 * j, 20, 20, null);
					}

				}

		

		}
		public boolean bounce() {
		return floor.getX() <= ball.getX()
				&& ball.getX() <= floor.getX() + floor.size();

	}

	public boolean checkcollision(Brick brick) {

		if ((brick.getX() < ball.getX() + 5 && ball.getX() + 5 < brick.getX()
				+ brick.getWidth())
				&& (ball.getY() == brick.getY() + brick.getHeight())) {
			Vy = -Vy;
			return true;

		} else if ((brick.getX() < ball.getX() + 5 && ball.getX() + 5 < brick
				.getX() + brick.getWidth())
				&& ball.getY() + 10 == brick.getY()) {
			Vy = -Vy;
			return true;

		}
		if (brick.getY() < ball.getY() + 5
				&& ball.getY() + 5 < brick.getY() + brick.getHeight()
				&& ((ball.getX() + 10 == brick.getX()))) {
			Vx = -Vx;
			return true;
		} else if (brick.getY() < ball.getY() + 5
				&& ball.getY() + 5 < brick.getY() + brick.getHeight()
				&& ball.getX() == brick.getX() + brick.getWidth()) {
			Vx = -Vx;
			return true;
		}
		if (((brick.getX() == ball.getX() + 5) || (ball.getX() + 5 == brick
				.getX() + brick.getWidth()))
				&& ((brick.getY() == ball.getY() + 5 || ball.getY() + 5 == brick
						.getY() + brick.getHeight()))) {
			Vx = -Vx;
			Vy = -Vy;
			return true;
		}
		return false;
	}
	class MyMouseListener extends MouseAdapter {
	private Floor floor;
	private int dx;

	public MyMouseListener(Floor floor) {
		this.floor = floor;
	}

	public void mousePressed(MouseEvent e) {
		dx = e.getX() - floor.getX();
	}

	public void mouseDragged(MouseEvent e) {
		if (e.getX() - dx < 400)
			floor.setX(e.getX() - dx);
	}
}
	
